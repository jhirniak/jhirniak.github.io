<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jaroslaw Hirniak&#39;s Pirate Parrot</title>
    <link>http://jhirniak.github.io/post/</link>
    <description>Recent content in Posts on Jaroslaw Hirniak&#39;s Pirate Parrot</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Nov 2015 10:40:17 +0000</lastBuildDate>
    <atom:link href="http://jhirniak.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Google open-sources TensorFlow Machine Learning software library</title>
      <link>http://jhirniak.github.io/post/tensor_flow_reveal/</link>
      <pubDate>Tue, 10 Nov 2015 10:40:17 +0000</pubDate>
      
      <guid>http://jhirniak.github.io/post/tensor_flow_reveal/</guid>
      <description>&lt;p&gt;Google just open-sourced its Machine Learning library under Apache 2.0. If you wonder what TensorFlow is then it is the tool behind automatic labelling of items in YouTube videos and photos, improving speech recognition in Google apps (e.g. when it is noisy), and used across different products such as Google Calendar events creation based on email (e.g. itinerary from ticket receipts), or even the &lt;a href=&#34;http://googleresearch.blogspot.co.uk/2015/11/computer-respond-to-this-email.html&#34;&gt;automatic email reply prototype&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even the name is great, tensors are your best friend in ML, if they flow, and the flow scales, its hard to make you happier. +1 for Google for sharing TensorFlow.&lt;/p&gt;

&lt;p&gt;Articles:
* &lt;a href=&#34;https://googleblog.blogspot.co.uk/2015/11/tensorflow-smarter-machine-learning-for.html&#34;&gt;TensorFlow open-sourcing on Google Blog&lt;/a&gt;
* &lt;a href=&#34;http://googleresearch.blogspot.co.uk/2015/11/tensorflow-googles-latest-machine_9.html&#34;&gt;Google Research blog reveal&lt;/a&gt;
* &lt;a href=&#34;https://www.youtube.com/watch?v=90-S1M7Ny_o&amp;amp;t=21m2s&#34;&gt;Keynotes &amp;lsquo;15 on TensorFlow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.tensorflow.org/&#34;&gt;TensorFlow projet website&lt;/a&gt;
&lt;a href=&#34;https://github.com/tensorflow/tensorflow&#34;&gt;TensorFlow source code on GitHub&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hiding your email address from spammers using jQuery</title>
      <link>http://jhirniak.github.io/post/hiding_email_with_jquery/</link>
      <pubDate>Sun, 08 Nov 2015 17:02:41 +0000</pubDate>
      
      <guid>http://jhirniak.github.io/post/hiding_email_with_jquery/</guid>
      <description>

&lt;h2 id=&#34;requirements:a8dbd5823328f76daa5b24981e9dc3b5&#34;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;jQuery:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this tutorial we will need jQuery, which you can get from &lt;a href=&#34;https://code.jquery.com/&#34;&gt;jQuery CDN&lt;/a&gt;. We will use the latest and minified jQuery from &lt;a href=&#34;https://code.jquery.com/jquery-2.1.4.min.js&#34;&gt;https://code.jquery.com/jquery-2.1.4.min.js&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;https://code.jquery.com/jquery-2.1.4.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;This trick will only work on browsers with enabled JavaScript and it is estimated that &lt;a href=&#34;https://gds.blog.gov.uk/2013/10/21/how-many-people-are-missing-out-on-javascript-enhancement/&#34;&gt;about 1% of Internet users have JavaScript disabled&lt;/a&gt;. So, this trick may not work for everyone. For me it is fine because of my target audience.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-nuts-and-bolts:a8dbd5823328f76daa5b24981e9dc3b5&#34;&gt;The nuts and bolts&lt;/h2&gt;

&lt;p&gt;We will create a dummy &lt;code&gt;a&lt;/code&gt; tag such as&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;a id=&amp;quot;mm&amp;quot; href=&amp;quot;mailto:nospam@thanks.com&amp;quot;&amp;gt;click to reveal (JS required)&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;for which click we will
1. we will intercept click with jQuery,
2. decode email address from base64 representation,
3. update &lt;code&gt;href&lt;/code&gt; attribute and text of our &lt;code&gt;a&lt;/code&gt; tag,
4. prevent default click action (i.e. openning default mail client to give it more logical flow),
5. and finally unbind jQuery event trigger to leave default HTML behaviour, from here on.&lt;/p&gt;

&lt;h3 id=&#34;base-64:a8dbd5823328f76daa5b24981e9dc3b5&#34;&gt;Base 64&lt;/h3&gt;

&lt;p&gt;Base64 is binary-to-text encoding scheme for representing binary
data in string format in ASCII string encoding. For most implementations base64 uses &lt;code&gt;A-Z&lt;/code&gt;, &lt;code&gt;a-z&lt;/code&gt;, and &lt;code&gt;0-9&lt;/code&gt; for the first 62 characters of target code, and most differences depend on the last 2. You can think of same as of hexadecimal representation (base 16), octal (base 8), binary (base 2), here our radix (base) is just &lt;code&gt;64&lt;/code&gt;, with other requirement being that characters are printable.&lt;/p&gt;

&lt;p&gt;Base64 encoding and decoding is available in vanilla JS using &lt;code&gt;btoa&lt;/code&gt; (for encoding &amp;ldquo;binary&amp;rdquo; string to encoded ASCII) and &lt;code&gt;btoa&lt;/code&gt; for (for decoding encoded ASCII to our original &amp;ldquo;binary&amp;rdquo; string). You can read more about it on &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/btoa&#34;&gt;MDN&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here we will use string encoded before to obfruscate email address from the website source code, e.g. to prevent malicient web crawlers grabbing our email address and using it for spam. We generate base64 encoded string using &lt;code&gt;btoa&lt;/code&gt;, e.g. in the developer console (CTRL+SHIFT+J in Chrome) or the snippet below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/** Converts binary to ASCII representation */
btoa(&#39;your@email.address&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can test how &lt;code&gt;btoa&lt;/code&gt; and &lt;code&gt;atob&lt;/code&gt; works below:
&lt;div&gt;
&lt;label for=&#34;decoded&#34;&gt;Decoded: &lt;/label&gt;&lt;input type=&#39;text&#39; id=&#39;decoded&#39; /&gt;&lt;br&gt;
&lt;label for=&#34;encoded&#34;&gt;Encoded: &lt;/label&gt;&lt;input type=&#39;text&#39; id=&#39;encoded&#39; /&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;h3 id=&#34;updating-a-href-attribute-and-text:a8dbd5823328f76daa5b24981e9dc3b5&#34;&gt;Updating &lt;code&gt;a&lt;/code&gt; &lt;code&gt;href&lt;/code&gt; attribute and text&lt;/h3&gt;

&lt;p&gt;We simply update attribute &lt;code&gt;href&lt;/code&gt; value with &lt;code&gt;attr&lt;/code&gt; function and &lt;code&gt;a&lt;/code&gt; tag content with &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;unbinding-and-preventing-default:a8dbd5823328f76daa5b24981e9dc3b5&#34;&gt;Unbinding and preventing default&lt;/h3&gt;

&lt;p&gt;We want to disable the jQuery event trigger after first firing. To do this we apply &lt;code&gt;off(&amp;quot;click&amp;quot;)&lt;/code&gt; to disable all click triggers for given selector.&lt;/p&gt;

&lt;p&gt;Also we want to prevent browser from doing the default action of opening mail client for the update &lt;code&gt;mailto&lt;/code&gt; value to give our implementation more natural look and feel (first reveal then email). We do this using &lt;code&gt;preventDefault()&lt;/code&gt; function on event &lt;code&gt;e&lt;/code&gt; passed to our function on the event trigger.&lt;/p&gt;

&lt;p&gt;Note that because of the scope, i.e. inside &lt;code&gt;$(&amp;quot;a#mm&amp;quot;)&lt;/code&gt; we can use &lt;code&gt;$(this)&lt;/code&gt; to refer to &lt;code&gt;$(&amp;quot;a#mm&amp;quot;)&lt;/code&gt;, what we do for clarity.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&amp;quot;a#mm&amp;quot;).click(function (e) {
  // ...
  $(this).off(&amp;quot;click&amp;quot;);
  e.preventDefault();
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;jquery:a8dbd5823328f76daa5b24981e9dc3b5&#34;&gt;jQuery&lt;/h3&gt;

&lt;p&gt;We can add our event trigger only when document is ready (i.e. browser generated all the fields in body), which we can do by placing our little script at the end of &lt;code&gt;body&lt;/code&gt; or separate script and surrounding it with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javasript&#34;&gt;$(document).ready(function () {
	// our implementation
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or for compactness just with&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(function {
  // our implementation
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where both are equivalent.&lt;/p&gt;

&lt;h2 id=&#34;final-code:a8dbd5823328f76daa5b24981e9dc3b5&#34;&gt;Final code&lt;/h2&gt;

&lt;p&gt;Finally our code, that we can now include on our website, looks like this (email address is taken from the encoded field above).&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(function () {
  $(&amp;quot;a#mm&amp;quot;).click(function (e) {
    console.log(&#39;Fired&#39;);
    var secret = function () { return atob(&#39;akBoaXJuaWFrLmluZm8=&#39;) };
    $(this).attr(&amp;quot;href&amp;quot;, &#39;mailto:&#39; + secret());
    $(this).text(secret());
    $(this).off(&amp;quot;click&amp;quot;);
    e.preventDefault();
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;demo:a8dbd5823328f76daa5b24981e9dc3b5&#34;&gt;Demo&lt;/h2&gt;

&lt;p&gt;I used this method on my &lt;a href=&#34;http://jhirniak.github.io/about/&#34;&gt;about page&lt;/a&gt; page. But, the below example uses email encoded in the &lt;code&gt;encoded&lt;/code&gt; field above.&lt;/p&gt;

&lt;pre&gt;The best way to contact me is via email &lt;a id=&#34;mm&#34; href=&#34;mailto:nospam@thanks.com&#34;&gt;click to reveal (JS required)&lt;/a&gt;.
&lt;/pre&gt;

&lt;script type=&#39;text/javascript&#39;&gt;
  $(function () {
    var decodedTextField = $(&#34;#decoded&#34;);
    var encodedTextField = $(&#34;#encoded&#34;);

    decodedTextField.val(&#39;hello@world.com&#39;);
    encodedTextField.val(btoa(&#39;hello@world.com&#39;));

    decodedTextField.on(&#39;input&#39;, function () {
      encodedTextField.val(btoa(decodedTextField.val()));
      bindMailReveal();
    });

    encodedTextField.on(&#39;input&#39;, function () {
    decodedTextField.val(atob(encodedTextField.val()));
    bindMailReveal();
  });


  function bindMailReveal() {
    $(&#34;a#mm&#34;).click(function (e) {
      console.log(&#39;Reveal the email.&#39;);
      var secret = function () { return atob($(&#34;#encoded&#34;).val()); };
      $(this).attr(&#34;href&#34;, &#39;mailto:&#39; + secret());
      $(this).text(secret());
      $(this).off(&#34;click&#34;);
      e.preventDefault();
    });
    $(&#34;a#mm&#34;).text(&#34;click to reveal (JS required)&#34;);
    $(this).attr(&#34;href&#34;, &#39;mailto:&#39; + &#34;nospam@thanks.com&#34;);
    console.log(&#39;Binded mail encode function.&#39;);
  }

  bindMailReveal();

});
&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>Hosting Hugo on GitHub Pages: Workflow</title>
      <link>http://jhirniak.github.io/post/hugo_workflow_for_github/</link>
      <pubDate>Sun, 08 Nov 2015 02:41:50 +0000</pubDate>
      
      <guid>http://jhirniak.github.io/post/hugo_workflow_for_github/</guid>
      <description>

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#hosting-personal-organizational-page-in-one-repo:55e98266337c51f1413d03075e44f733&#34;&gt;Hosting personal/organizational page in one repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hosting-personal-organizational-page-in-two-repos:55e98266337c51f1413d03075e44f733&#34;&gt;Hosting personal/organizational page in two repos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hosting-project-page:55e98266337c51f1413d03075e44f733&#34;&gt;Hosting project page&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;hosting-hugo-on-github-pages-workflow:55e98266337c51f1413d03075e44f733&#34;&gt;Hosting Hugo on GitHub pages: workflow&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub&lt;/a&gt; is a great and convenient place to host your static pages - it gives you a nice website address with &lt;code&gt;github.io&lt;/code&gt; and combines repo for your website with hosting. Furthermore, it is free and ad-free. I believe if set up right then it can save you considerable time. In this post I share a great git workflow I use for this blog with a &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo static engine&lt;/a&gt;. The workflow was described by &lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Spencer Lyon in his tutorial on hosting Hugo on GitHub pages&lt;/a&gt;, here I share 2 workflows described by Spencer and one my own.&lt;/p&gt;

&lt;h2 id=&#34;hosting-personal-organizational-page-in-one-repo:55e98266337c51f1413d03075e44f733&#34;&gt;Hosting personal/organizational page in one repo&lt;/h2&gt;

&lt;p&gt;If you are creating a new repo then just do follow the instructions exactly. You can rename &lt;code&gt;code&lt;/code&gt; branch to anything you like, except &lt;code&gt;master&lt;/code&gt;, as &lt;code&gt;master&lt;/code&gt; is a branch from which GitHub Pages get static website content. Note, that the website available under &lt;code&gt;&amp;lt;your-username&amp;gt;.github.io&lt;/code&gt; must be hosted in a repo called &lt;code&gt;&amp;lt;your-username&amp;gt;.github.io&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you have extisting repo at &lt;code&gt;&amp;lt;your-username&amp;gt;.github.io&lt;/code&gt; then you can either delete the repo and start clean following the instructions or delete the master branch with &lt;code&gt;git branch -D master&lt;/code&gt; making sure before if that branch has your website code that you checked it out to another branch with &lt;code&gt;git checkout -b &amp;lt;code-branch&amp;gt;&lt;/code&gt; and `git push origin &lt;code-branch&gt;&amp;rsquo;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create &lt;code&gt;&amp;lt;your-username&amp;gt;.github.io&lt;/code&gt; repo. Alternatively, if you have got existing &lt;code&gt;&amp;lt;your-username&amp;gt;.github.io&lt;/code&gt; repo then make sure to checkout code to non-&lt;code&gt;master&lt;/code&gt; branch with steps described above.&lt;/li&gt;
&lt;li&gt;If you are starting fresh initialize the repo:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git init
git checkout code
echo &amp;quot;# README&amp;quot; &amp;gt;&amp;gt; README.md
git add .
git commit -m &#39;Initial commit&#39;
git remote add origin git@github.com:username/username.github.io git
git push -u origin code
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Now, the steps regardless if repo existed or not are the same. Create orphan branch (a branch that has no common history with an existing branch) called &lt;code&gt;master&lt;/code&gt;. We will synchronize its code with &lt;code&gt;public&lt;/code&gt; folder of the &lt;code&gt;code&lt;/code&gt; branch.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Set up orphan branch master
git checkout --orphan master
git rm --cached $(git ls-files)
git checkout code README.md
git add .
git commit -m &amp;quot;INIT: initial commit on master branch&amp;quot;
git push origin master

git checkout code

# Create Hugo website or copy existing files for Hugo website
rm -rf public/
git subtree add --prefix=public git@github.com:username/username.github.io.git master --squash
git subtree pull --prefix=public git@github.com:username/username.github.io.git master --squash # to avoid merge conflicts
hugo # with any parameters you may need, as -b=http://www.username.github.io --theme=your_theme_name --buildDrafts -d=public/ -v
git add -A .
git commit -m &#39;Website update&#39;
git push origin code
git subtree push --prefix=public git@github.com:username/username.github.io.git master --squash
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deploy-sh:55e98266337c51f1413d03075e44f733&#34;&gt;Deploy.sh&lt;/h3&gt;

&lt;p&gt;To automate the above process of commiting to code branch, generating Hugo static pages, and pushing them to &lt;code&gt;master&lt;/code&gt; branch we will create &lt;code&gt;deploy.sh&lt;/code&gt; script. Remember, to update &lt;code&gt;&amp;lt;your-username&amp;gt;&lt;/code&gt;, &lt;your-project&gt;, and if you used different prefix &lt;code&gt;--prefix&lt;/code&gt; in the script. Finally, make the script executable with &lt;code&gt;chmod +x deploy.sh&lt;/code&gt; and commit it to the repo. To use the script you just need to type &lt;code&gt;./deploy.sh &amp;lt;commit-message&amp;gt;&lt;/code&gt;. If you leave &lt;code&gt;&amp;lt;commit-message&amp;gt;&lt;/code&gt; empty then &lt;code&gt;rebuilding site &amp;lt;current-date&amp;gt;&lt;/code&gt; will be used instead.&lt;/p&gt;

&lt;p&gt;We format the terminal output with escape codes. Paremeter &lt;code&gt;-e&lt;/code&gt; escapes the text before printing it to the terminal. Here&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\e[1m&lt;/code&gt; makes text bold,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\e[7m&lt;/code&gt; reverse colors (will result with black on green background, if your terminal background is black),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\e[32m&lt;/code&gt; make text color green.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read more about bash colors and formatting escape codes &lt;a href=&#34;http://misc.flogisoft.com/bash/tip_colors_and_formatting&#34;&gt;Flozz&amp;rsquo;s website&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Build the project
# You may need to use some of the below options:
#   * -b=http://&amp;lt;your-username&amp;gt;.github.io/&amp;lt;your-project&amp;gt;
#   * --theme=&amp;lt;your-theme-name&amp;gt;
#   * --buildDrafts   # include drafts
#   * -d=&amp;lt;static-pages-dir&amp;gt;
#   * -v   # verbose
#
# Example: hugo -b=http://jhirniak.github.io/ --theme=hugo-steam-theme -d=public/ -v
echo -e &amp;quot;\e[1m\e[7m\e[32mBuilding the project...\e[0m&amp;quot;
hugo

# Add changes to git.
echo -e &amp;quot;\e[1m\e[7m\e[32mCommitting updates to code branch...\e[0m&amp;quot;
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin code

echo -e &amp;quot;\e[1m\e[7m\e[32mPushing the changes to master branch...\e[0m&amp;quot;
echo -e &amp;quot;\e[1m\e[7m\e[32mUpdating the website...\e[0m&amp;quot;
# Example:
# git subtree push --prefix=public git@github.com:jhirniak/jhirniak.github.io.git master
git subtree push --prefix=public git@github.com:&amp;lt;your-username&amp;gt;/&amp;lt;your-username&amp;gt;.github.io.git master
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hosting-personal-organizational-page-in-two-repos:55e98266337c51f1413d03075e44f733&#34;&gt;Hosting personal/organizational page in two repos&lt;/h2&gt;

&lt;p&gt;When you divide project into a submodule for the &lt;code&gt;username.github.io&lt;/code&gt; static pages from &lt;code&gt;public&lt;/code&gt; folder (or the one that you use) and separate repo for the website code then the procedure is quite simple.&lt;/p&gt;

&lt;p&gt;Step by step:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create &lt;code&gt;code&lt;/code&gt; repository, e.g. &lt;code&gt;&amp;lt;username&amp;gt;-hugo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create static &lt;code&gt;website&lt;/code&gt; repository, i.e. &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;, for &lt;code&gt;public&lt;/code&gt; folder of you hugo website.&lt;/li&gt;
&lt;li&gt;Create website at &lt;code&gt;&amp;lt;username&amp;gt;-hugo&lt;/code&gt;, test it with &lt;code&gt;hugo server --watch -t &amp;lt;yourtheme&amp;gt;&lt;/code&gt;, and once happy remove &lt;code&gt;public&lt;/code&gt; folder with &lt;code&gt;rm -rf public&lt;/code&gt; and commit changes.&lt;/li&gt;
&lt;li&gt;Add submodule at &lt;code&gt;&amp;lt;username&amp;gt;-hugo&lt;/code&gt; repo with:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git submodule add git@github.com:&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.git public
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;deploy.sh&lt;/code&gt; script and make it executable with &lt;code&gt;chmod +x deploy.sh&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;deploy-sh-1:55e98266337c51f1413d03075e44f733&#34;&gt;Deploy.sh&lt;/h3&gt;

&lt;p&gt;Remember, to update &lt;code&gt;&amp;lt;your-username&amp;gt;&lt;/code&gt;, &lt;your-project&gt;, and if you used different prefix &lt;code&gt;--prefix&lt;/code&gt; in the script. Finally, make the script executable with &lt;code&gt;chmod +x deploy.sh&lt;/code&gt; and commit it to the repo. To use the script you just need to type &lt;code&gt;./deploy.sh &amp;lt;commit-message&amp;gt;&lt;/code&gt;. If you leave &lt;code&gt;&amp;lt;commit-message&amp;gt;&lt;/code&gt; empty then &lt;code&gt;rebuilding site &amp;lt;current-date&amp;gt;&lt;/code&gt; will be used instead.&lt;/p&gt;

&lt;p&gt;We format the terminal output with escape codes. Paremeter &lt;code&gt;-e&lt;/code&gt; escapes the text before printing it to the terminal. Here&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\e[1m&lt;/code&gt; makes text bold,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\e[7m&lt;/code&gt; reverse colors (will result with black on green background, if your terminal background is black),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\e[32m&lt;/code&gt; make text color green.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read more about bash colors and formatting escape codes &lt;a href=&#34;http://misc.flogisoft.com/bash/tip_colors_and_formatting&#34;&gt;Flozz&amp;rsquo;s website&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Build the project
# You may need to use some of the below options:
#   * -b=http://&amp;lt;your-username&amp;gt;.github.io/&amp;lt;your-project&amp;gt;
#   * --theme=&amp;lt;your-theme-name&amp;gt;
#   * --buildDrafts   # include drafts
#   * -d=&amp;lt;static-pages-dir&amp;gt;
#   * -v   # verbose
#
# Example: hugo -b=http://jhirniak.github.io/ --theme=hugo-steam-theme -d=public/ -v
echo -e &amp;quot;\e[1m\e[7m\e[32mBuilding the project...\e[0m&amp;quot;
hugo

cd public    # Go To Public folder
git add -A   # Add changes to git.

# Add changes to git.
echo -e &amp;quot;\e[1m\e[7m\e[32mPushing updates to master branch of &amp;lt;username&amp;gt;.github.io...\e[0m&amp;quot;
echo -e &amp;quot;\e[1m\e[7m\e[32mUpdating the website...\e[0m&amp;quot;
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

git push origin master   # Push source and build repos.

cd ..   # Come Back
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hosting-project-page:55e98266337c51f1413d03075e44f733&#34;&gt;Hosting project page&lt;/h2&gt;

&lt;p&gt;Project page workflow is very similar to hosting personal/organizational page, except that the static pages are in &lt;code&gt;gh-pages&lt;/code&gt; branch and code in some other branch. Here, we assume that you are creating &lt;code&gt;gh-pages&lt;/code&gt; for existing project.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create an orphan branch (no commit history) &lt;code&gt;gh-pages&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout --orphan gh-pages

# Unstage all files
git rm --cached $(git ls-files)

# Grab one file from the master branch to make a commit
git checkout master README.md

# Add and commit that file
git add .
git commit -m &amp;quot;INIT: initial commit on gh-pages branch&amp;quot;

# Push to remote gh-pages branch
git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;Now, we will configure workflow on the branch that has Hugo files, here we assume it is on &lt;code&gt;master&lt;/code&gt; branch, but it could be any.&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout master # Return to master branch

git checkout -b website # Or create new branch for the website

3. Create or copy your Hugo project if you have not got it ready, yet.

4. Set up workflow:
```bash 
# Remove the public folder to make room for the gh-pages subtree
rm -rf public

# Add the gh-pages branch of the repository.
git subtree add --prefix=public git@github.com:&amp;lt;your-username&amp;gt;/&amp;lt;your-project&amp;gt;.git gh-pages --squash

# Pull down the file we just committed to avoid merge conflicts.
# It is the same as above, except for the word `add` that is replaced with word `pull`.
git subtree pull --prefix=public git@github.com:&amp;lt;your-username&amp;gt;/&amp;lt;your-project&amp;gt;.git gh-pages

# Generate static pages with Hugo.
# You may need to use some of the below options:
#   * -b=http://&amp;lt;your-username&amp;gt;.github.io/&amp;lt;your-project&amp;gt;
#   * --theme=&amp;lt;your-theme-name&amp;gt;
#   * --buildDrafts   # include drafts
#   * -d=&amp;lt;static-pages-dir&amp;gt;
#   * -v   # verbose
hugo 


# Commit changes
git add -A
git commit -m &amp;quot;Updating site&amp;quot;
git push origin master

# Push the `public` subtree to the `gh-pages`
git subtree push --prefix=public git@github.com:&amp;lt;your-username&amp;gt;/&amp;lt;your-project&amp;gt;.git gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;deploy-sh-2:55e98266337c51f1413d03075e44f733&#34;&gt;Deploy.sh&lt;/h3&gt;

&lt;p&gt;To automate the whole process add the below &lt;code&gt;deploy.sh&lt;/code&gt; script. Remember, to update &lt;code&gt;&amp;lt;your-username&amp;gt;&lt;/code&gt;, &lt;your-project&gt;, and if you used different prefix &lt;code&gt;--prefix&lt;/code&gt; in the script. Finally, make the script executable with &lt;code&gt;chmod +x deploy.sh&lt;/code&gt; and commit it to the repo. To use the script you just need to type &lt;code&gt;./deploy.sh &amp;lt;commit-message&amp;gt;&lt;/code&gt;. If you leave &lt;code&gt;&amp;lt;commit-message&amp;gt;&lt;/code&gt; empty then &lt;code&gt;rebuilding site &amp;lt;current-date&amp;gt;&lt;/code&gt; will be used instead.&lt;/p&gt;

&lt;p&gt;We format the terminal output with escape codes. Paremeter &lt;code&gt;-e&lt;/code&gt; escapes the text before printing it to the terminal. Here&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\e[1m&lt;/code&gt; makes text bold,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\e[7m&lt;/code&gt; reverse colors (will result with black on green background, if your terminal background is black),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\e[32m&lt;/code&gt; make text color green.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can read more about bash colors and formatting escape codes &lt;a href=&#34;http://misc.flogisoft.com/bash/tip_colors_and_formatting&#34;&gt;Flozz&amp;rsquo;s website&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

# Build the project
# You may need to use some of the below options:
#   * -b=http://&amp;lt;your-username&amp;gt;.github.io/&amp;lt;your-project&amp;gt;
#   * --theme=&amp;lt;your-theme-name&amp;gt;
#   * --buildDrafts   # include drafts
#   * -d=&amp;lt;static-pages-dir&amp;gt;
#   * -v   # verbose
#
# Example: hugo -b=http://jhirniak.github.io/ --theme=hugo-steam-theme -d=public/ -v
echo -e &amp;quot;\e[1m\e[7m\e[32mBuilding the project...\e[0m&amp;quot;
hugo

# Add changes to git.
echo -e &amp;quot;\e[1m\e[7m\e[32mCommitting updates to code branch...\e[0m&amp;quot;
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push to master.
git push origin master

# Update website gh-pages branch from generate files.
echo -e &amp;quot;\e[1m\e[7m\e[32mPushing the changes to master branch...\e[0m&amp;quot;
echo -e &amp;quot;\e[1m\e[7m\e[32mUpdating the website...\e[0m&amp;quot;
# Example:
# git subtree push --prefix=public git@github.com:jhirniak/amaze.git gh-pages
git subtree push --prefix=public git@github.com:&amp;lt;your-username&amp;gt;/&amp;lt;your-project&amp;gt;.git gh-pages
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>